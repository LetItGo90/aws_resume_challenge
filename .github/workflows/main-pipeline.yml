name: Deploy Resume Site

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    name: Test Lambda Function
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          pip install pytest boto3 moto
      
      - name: Create test file
        run: |
          cat > backend/test_lambda.py << 'EOF'
          import json
          import pytest
          from moto import mock_dynamodb
          import boto3
          
          # Import your lambda function
          import sys
          sys.path.append('.')
          from lambda_function import lambda_handler
          
          @mock_dynamodb
          def test_lambda_handler():
              # Create mock DynamoDB table
              dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
              table = dynamodb.create_table(
                  TableName='visitor-counter',
                  KeySchema=[{'AttributeName': 'id', 'KeyType': 'HASH'}],
                  AttributeDefinitions=[{'AttributeName': 'id', 'AttributeType': 'S'}],
                  BillingMode='PAY_PER_REQUEST'
              )
              
              # Test the lambda
              event = {}
              context = {}
              response = lambda_handler(event, context)
              
              assert response['statusCode'] == 200
              body = json.loads(response['body'])
              assert 'visitor_count' in body
              print(f"Test passed! Visitor count: {body['visitor_count']}")
          EOF
      
      - name: Run tests
        run: |
          cd backend
          pytest test_lambda.py -v

  deploy-frontend:
    name: Deploy Frontend
    needs: [test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Sync S3 bucket
        run: |
          aws s3 sync frontend/ s3://austin-mundy-resume.com --delete
          echo "Frontend deployed to S3"
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text
          echo "CloudFront cache invalidated"

  deploy-backend:
    name: Deploy Lambda Function
    needs: [test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Package Lambda function
        run: |
          cd backend
          zip function.zip lambda_function.py
          echo "ğŸ“¦ Lambda function packaged"
      
      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name resume-visitor-counter \
            --zip-file fileb://backend/function.zip \
            --query 'FunctionArn' \
            --output text
          echo "Lambda function updated"
      
      - name: Wait for Lambda update
        run: |
          aws lambda wait function-updated \
            --function-name resume-visitor-counter
          echo "Lambda function is active"
